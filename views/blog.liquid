<!DOCTYPE html>

<html lang="nl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/stylesheet.css">
    <link rel="stylesheet" href="/css/blog.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Bangers&family=Indie+Flower&display=swap" rel="stylesheet">
    <title>Blog</title>

    <script src="/public/scripts/" type="module"></script>
</head>

<body> 

    <main>

    <div class="red-line">
        <div class="red-line-break">
            <a href="/" class="home-button-blog">Home</a>
        </div>
    </div>

        <article class="paper">
            
            <header>
                <h1>CSS-Day!</h1>
            </header>

            <section>
                <h2>CSS-Dag 1</h2>
                <h3>Introductie</h3>
                <p>Na het maken van <stron class="marker-ani-variation-1"><a href="#entry-css-day">mijn blog</a> over view-transitions</strong>. Had ik vandaag dus de kans om op CSS-Day te komen. 
                <strong class="marker-marker-ani-variation-2">6 sprekers kwamen vandaag vertellen over coole nieuwe features in CSS</strong>, en in het algemeen. 1 van deze speakers was Cyd Stumpel (Ons Docent) 
                waar ik later nog even over ga praten. ANYWAY! <strong class="marker-ani-variation-3">Het was een unieke en echt bijzonder leerzame dag voor mij.</strong>
                Zoals ik tegen vele op het event die ik met genoegen heb mogen spreken zij: <strong class="marker-ani-variation-2">"Ik kwam eigenlijk voor bewijslast, maar dat is echt compleet opmgedraaid. </strong>
                Eenmaal tijdens event boeide mij dit geen kanus,en kwam ik erachter dat ik echt wel kwam om te leren, en niet voor bewijstlast (wel een mooie bonus werdt dit). 
                Ik heb zo bizar veel gepraat met mensen en geleerd van de speakers, maar ook van mensen op het event. Niet alleen over dingen binnen CSS, 
                maar ook gewoon hoe je het werkveld instapt of hoe je Ã¼berhaupt hoi zegt tegen mensen. Ik kan meestal wel een gesprek aanhouden, maar nooit starten. 
                Deze mensen, en voornamelijk Adam Argyle (Wie dat is praat ik later over), waaren zo genuine in alles, dat ze me ook hiermee hielpen. 
                <strong class="marker-ani-variation-1">Ik heb wel duizend links en woorden die ik wil laten zien, dus laten we daar maar is meer starten. Dit is namelijk Adam Argyle, 
                en persoon waarvan ik nog niet eerder had gehoord tot vandaag op CSS-Day (5 juni 2o25).</strong></p>
            </section>
            <section>
                <h2>Adam Argyle : Level up your Scroll UX</h2> 
                <ul>
                    <li>
                        <a href="https://nerdy.dev">Website</a> <!-- Voeg hier nog een popover aan toe-->
                    </li>
                    <li>
                        <a href="https://codepen.io/collection/JYdmwr">Codepen</a> 
                    </li>
                    <li>
                        <a href="https://css-day-2025.argyleink.deno.net">Collectie Slides</a> 
                    </li>
                </ul>
                <h4 class="graffiti-header">"People Grab Thumbs!"</h4>
                <p><strong class="marker-ani-variation-2">Adam was de eerste spreker van vandaag.</strong> Hij was ook (Sorry Cyd) mijn favoriete van de dag. Voornamelijk omdat hij praatte over scrollbars, 
                en hoe hij deze aanpast en styled. Mooiste van allemaal, het is nog accessible ook! Het is zo'n klein niche ding, wat echt TOTAAL niet persee nodig is, 
                maar een website gewoon bijzonder vet maakt. <strong class="marker-ani-variation-1">Ik had nog de kans om met hem te praten na het event.</strong>
                Geweldige gozer. Ben ook na dit event hem gaan volgen, en hoop nog meer van hem te leren wat de toekomst brengt. 
                <p>Goed, <strong class="marker-ani-variation-3">hier zijn een aantal notites van zijn presentatie:</strong></p>
                <ul>
                    <li><strong class="marker-ani-variation-2">"Overflow: auto = A scroll hint, Thumb size hints at the corpus. It's feedback, Your keyboard and everything works."</strong></li>
                    <li>"Scollbars are our friend"</li>
                </ul>
                <p>Er waren wel 3 presentaties over de scrollbars, maar wij gaan het hebben over de 'wat simpelere'. 
                Deze kan je <a href="https://codepen.io/argyleink/pen/pvJvqjY">hier</a> vinden. Echter zeg ik wel "wat simpeler", 
                maar echt de helft dat hierin staat snap ik de ballen van. 
                Maar ik ga mijn best doen om voor mijzelf nog even zijn presentatie (voor deze slide), samen te vatten.
                <strong class="marker-ani-variation-3">Als eerste had hij het over dat hij gebruikt maakt van 3 elementen binnen zijn HTML waarvan 2 divs voor de scroller.</strong></p>
                <code>
                    HTML:
                    <section class="scroll--root">
                        <div class="scroll--viewport">
                            <div class="scroll--content">
                </code>
                <code>
                    CSS (Simplified):
                    /* 
                    HTML Structure, 3 elements

                    .scroll--root 
                        > .scroll--viewport 
                        > .scroll--content
                            > YOUR_CONTENT
                */
                </code>
                <p>Nou wil ik echt heel diep hier over in gaan, maar <strong class="marker-ani-variation-2">je kan beter gewoon ze codepen checken</strong> en erachter komen hoe dit allemaal werkt in zijn css. 
                Echter zijn er wel 2 super belangrijke dingen die moeten worden gedaan wat hij elke keer deed in al zijn demo's. 
                Dat is dat je de scroll root eigenlijk alleen laat, en deze 3 lines code in de viewport verwerkt, alles daaronder is puur styling:</p>
                <code>    
                    /* be explicit about the axis */
                    overflow: hidden auto;
        
                    /* nearly always specify overscroll behavior */
                    overscroll-behavior-y: contain;
        
                    /* enable if ok with user's preference */
                    @media (prefers-reduced-motion: no-preference) {
                        scroll-behavior: smooth;
                    }
                </code>
                <p>Zoals ik al zij, ik kan nog wel uren hierover praten, maar het beste is gewoon zijn slides te bekijken, samen met de dingen die hij heeft gemaakt voor die slides. </p>
            </section>
            <section>
                <h2>Cyd Stumpel : CSS came for my job!</h2>
                <ul>
                    <li>
                        <a href="https://github.com/Sidstumple/view-transitions">Github</a>
                    </li>
                </ul>
                <h4 class="rainbow-text">"Comic sans is okay if you use rainbows"</h4>
                <p>Cyd was ook echt geweldig om naar te luisteren. Ze zou eigenlijk gewoon mijn number 1 zijn vandaag, maar omdat ze mijn docent is plaats ik haar toch even naar 2,
                ik hoop dat ze het kan hebben. <strong class="marker-ani-variation-1">Ze is mijn number 1 docent voor CSS anyway!</strong>
                Ik weet niet eens waar te beginnen met deze presentatie en alle info dat ze wel niet had. 
                Een voordeel dat ik had is dat ik al gedeeltelijk wist waar ze vandaag over ging praten, 
                omdat ik al met ::view-transition heb gewerkt, dankzij haar hulp ook. Het beste is eigenlijk gewoon als je 
                <a href="#entry-css-day">mijn blog</a> bekijkt, waarin ik probeer uit te leggen over view transitions. 
                Omdat ze eigenlijk zoveel was gaan praten over haar code heb ik ook echt nul qoutes kunnen opschrijven. 
                <strong class="marker-ani-variation-2">Het beste is gewoon haar github te bekijken</strong> en dan hopen dat mijn geheugen nog genoeg snapt wat ze bedoelde bij bepaalde delen van haar code. 
                </p>
            </section>
            <section>
                <h2 id="entry-css-day">Bloem met ::view-transition (Blog)</h2>
                <h3>Introductie</h3>
                <p><strong class="marker-ani-variation-3">Wat nou als je een coole animatie wil hebben tussen twee pagina's</strong>, in alleen CSS en HTML? BAM, <strong class="marker-ani-variation-1">daar heb je ::view-transition voor.</strong> 
                Dit attribuut maakt het mogelijk om niet alleen cross-page, maar ook same-page view transitions te maken tussen elementen op je website. 
                En het beste? Je hebt hier bijna geen JavaScript voor nodig!
                </p>
                <p>Nadat we op school de kans kregen om naar het CSS Day congres (5 & 6 juni) te gaan, ben ik hier meer mee gaan experimenteren. 
                    <strong class="marker-ani-variation-2">=Ik wilde een animatie maken tussen de homepage en een profielpagina,</strong> waarbij een bloem je hele scherm overneemt en dan switcht naar de nieuwe pagina. 
                    Dit is wat ik heb gemaakt:
                    <!-- Hier komt een gif-->
                <p>Of check het live: <a href="https://pleasurable-ui-jby7.onrender.com/"></a>Mijn site</p>
                <b>Vet toch!</b></p>
                <p>Dit is me allemaal gelukt dankzij <a href="https://www.youtube.com/watch?v=Bq5GVrXO6jE&t=1668s">deze video</a> van Cyd, 
                waarin ze uitleg geeft over view-transitions. Dus dikke shoutout naar Cyd! Goed, introductie klaar - 
                tijd om uit te leggen hoe ik dit werkend heb gekregen!</p>
            </section>
            <section>
                <h4>Uitleg</h4>
                <p>Als eerste was het belangrijk om te werken met <strong class="marker-ani-variation-1">::view-transition-name.</strong> Dit is zodat ik tussen specifieke elementen kan transitionen, 
                dus - van iets, naar iets.</p>
                <ul>
                    <li><b>Homepage</b></li>
                    <li>
                        <code>
                            <article class="gift-box" style="view-transition-name: card-{{ gift.id }};"></article>
                        </code>
                        <p>Ik geef hier een view transtition mee voor een andere element, dit is niet belangrijk voor de view transition 'bloem', 
                        maar is wel nodig omdat het wordt gebruikt in de view transition.</p>
                    </li>
                    <li>
                        <code>
                            <div class="flower" height="138" width="129" style="view-transition-name: flower;"></div>
                        </code>
                        <p><strong class="marker-ani-variation-3">Dit is het belangrijkste!</strong> Dit is de bloem waarop de view transition gaat gebeuren</p>
                    </li>
                    <li><b>Profile:</b></li>
                    <li>
                        <code>
                            <div class="flower-new"></div>
                        </code>
                        <p>De div waaran ik in css een view transition meegeef. Dit kan ook in HTML zoals hierboven, ik wou echter beide uitproberen.</p>
                    </li>
                    <li>
                        <code>
                            .flower-new{
                                view-transition-name: flower;
                                width: 100vw;
                                height: 100vw;
                                scale: 3;
                                position: absolute;
                                top: 0%;
                                left: 0%;
                                margin: 0;
                                z-index: 1000;
                            }
                        </code>
                        <p>Stukje code in profile waar de bloem naar toe transitioned, 
                        dit is erg belangrijk omdat de 'oude' bloem vergroot in de 'nieuwe' die zich bevind op de profile, en andersom. 
                        In javascript verwijder ik deze class, nadat de animatie is gedaan. Dit is niet nodig, 
                        maar wel handig zodat je DOM niet op de profile word aangepast.</p>
                    </li>
                </ul>
                <p>Key, nu dat allemaal is gedaan, gaan we aan het vette beginnen. Als je wil kan je mijn volledige code <a href="https://github.com/Sebastiaan-hva/pleasurable-ui/blob/a41553006a0ff40578d7979bdfad1e7d2c2638d7/public/css/stylesheet.css#L343-L395">hier zien:</a></p>
                <h5>Om elke line nog even langs te gaan:</h5>
                <ol>
                    <li>
                        <code>
                            ::view-transition-new(root),
                            ::view-transition-old(root) {
                                animation-duration: 0.1s;
                                animation-fill-mode: both;
                                animation-timing-function: ease-in;
                            }
                        </code>
                        <p>Hierin pas ik alles aan, naast de flower animatie. De volledige DOM (naast bepaalde elementen die ik hieronder style) word weggehaald in 0.1s</p>
                    </li>
                    <li>
                        <code>
                            ::view-transition-group(flower){
                                z-index: 1000;
                            }
                        </code>
                        <p>Ik geef hier de flower group een index mee zodat deze boven alle elementen valt. Dit is zodat de animatie het hele scherm overneemt.</p>
                    </li>
                    <li>
                        <code>
                            ::view-transition-new(flower),
                            ::view-transition-old(flower){
                                animation-duration: 0.8s;
                                animation-fill-mode: both;
                                animation-name: flower-rotate;
                                animation-timing-function: ease-in;
                                overflow: clip;
                                object-fit: cover;
                                cursor: none;
                            }
                        </code>
                        <p>Hierin geef ik de duur van de animatie aan mee, en de animatie zelf, met behulp van keyframes.</p>
                    </li>
                    <li>
                        <code>
                            html::view-transition-group(*) {
                                animation-duration: 0.8s;
                                animation-fill-mode: both;
                            }
                        </code>
                        <p>Dit is de duur van alle animaties binnen de volledige DOM, en alle groups. Dit is zodat de kaartjes eigenlijk weg-faden, terwijl de bloem zolang duurt.</p>
                    </li>
                    <li>
                        <p>En als laatste de animatie:</p>
                        <code>
                            @keyframes flower-rotate{
                            from{
                                transform: scale(1);
                                transform: rotate(0deg);
                            }
                            to{
                                transform: scale(60);
                                transform: rotate(360deg);
                            }
                            }
                        </code>
                        <p>Dit is de duur van alle animaties binnen de volledige DOM, en alle groups. Dit is zodat de kaartjes eigenlijk weg-faden, terwijl de bloem zolang duurt.</p>
                    </li>
                </ol>
                <h4>Afsluitertje</h4>
                <p>Er zijn nog een aantal dingen dat ik wil fixen aan dit project. Voornamelijk dat de andere view transitions nu niet meer werken, 
                dit is een javascript ding, en ga ik binnenkort verwerken. Ook wil ik nog werken met clip-path: shape(), waarin de bloem dus meer uitrekt, 
                en niet statisch is. Ook wil ik dat de bloem altijd een willekeurige kant op gaat, dit ga ik ook nog even fixen.</p>
            </section>

            <aside class="left-side-divide-columnn"></aside>
            <aside class="right-side-divide-columnn-1"></aside>
            <aside class="right-side-divide-columnn-2"></aside>

        </article>

    </main>


    <footer class="footer-reveal">
        <div class="luuk">
            <img src="/assests/pics/luuk-full-body.svg" loading="lazy"  width="160px" height="180px" alt="Luuk waving Hi!">
            <!-- 
            <img src="/assests/pics/luuk-pic.svg" loading="lazy" class="head" width="160px" height="160px" alt="Picture of Luuk's head">
            <div class="body"></div>
            <div class="left-arm"></div>
            <div class="right-arm"></div>
            -->
        </div>
    </footer>

</body>